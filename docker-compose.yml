version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: review-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root123456
      MYSQL_DATABASE: review_platform
      MYSQL_USER: review_user
      MYSQL_PASSWORD: review123456
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - review-network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: review-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - review-network

  # Elasticsearch搜索引擎
  elasticsearch:
    image: elasticsearch:8.8.0
    container_name: review-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - review-network

  # RabbitMQ消息队列
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: review-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123456
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - review-network

  # Spring Boot后端应用
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: review-backend
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/review_platform?useSSL=false&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=review_user
      - SPRING_DATASOURCE_PASSWORD=review123456
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - SPRING_ELASTICSEARCH_URIS=http://elasticsearch:9200
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=admin
      - SPRING_RABBITMQ_PASSWORD=admin123456
    depends_on:
      - mysql
      - redis
      - elasticsearch
      - rabbitmq
    networks:
      - review-network

  # React前端应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: review-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8080/api
    depends_on:
      - backend
    networks:
      - review-network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: review-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - review-network

volumes:
  mysql_data:
  redis_data:
  elasticsearch_data:
  rabbitmq_data:

networks:
  review-network:
    driver: bridge 